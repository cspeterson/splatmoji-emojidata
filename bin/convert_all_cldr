#!/usr/bin/env bash

read -r -d '' help <<EOF
Downloads the latest CLDR from unicode (or uses a provided version), unpacks
it, and converts all of the emoji with their keywords (in all languages,
separately), into more readily-usable formats.

Usage:
  $(basename ${0}) -c [/path/to/cldr/core.zip] -s [/path/to/emoji-variation-sequences.txt] -o [/path/to/emoji-ordering-rules.txt]
EOF

trap early_exit SIGINT
early_exit() {
  echo
  echo
  echo "Temporary files may be left at '${temp_dir}'."
  exit $?
}

script_dir="$( cd "$( dirname "${BASH_SOURCE[0]}" )" >/dev/null 2>&1 && pwd )"

while getopts ':c:ho:s:' opt; do
  case "${opt}" in
    c)
      cldr_filepath="${OPTARG}"
      ;;
    h)
      echo "${help}"
      exit 0
      ;;
    o)
      ordering="${OPTARG}"
      ;;
    s)
      sequences="${OPTARG}"
      ;;
    *)
      echo "Invalid option ${OPTARG}" >&2
      echo "${help}"
      exit 1
      ;;
  esac
done

# Setup temp work area
temp_dir=$(mktemp -d)
mkdir -p "${temp_dir}"
extract_dir="${temp_dir}/core"

# Get/use cldr zip
if ! unzip -t "${cldr_filepath}" 2>/dev/null; then
  # Else go get the latest CLDR zip and use that
  cldr_filepath="${temp_dir}/core.zip"
  wget --output-document "${cldr_filepath}" 'http://unicode.org/Public/cldr/latest/core.zip'
fi
unzip -d "${extract_dir}" "${cldr_filepath}"

# Get/use presentation sequences
if ! [ -s "${sequences}" ]; then
  # Else go get the latest from Unicode
  sequences="${temp_dir}/emoji-variation-sequences.txt"
  wget --output-document "${sequences}" 'https://www.unicode.org/Public/UCD/latest/ucd/emoji/emoji-variation-sequences.txt'
fi

# Get/use ordering/grouping data
if ! [ -s "${ordering}" ]; then
  # Else go get the latest from Unicode
  ordering="${temp_dir}/emoji-ordering-rules.txt"
  wget --output-document "${ordering}" 'https://unicode.org/emoji/charts/emoji-ordering-rules.txt'
fi

annotations_base=()
for f in "${extract_dir}/common/annotations/"*.xml; do
  f=${f%.xml}
  f=${f##*/}
  annotations_base+=($f)
done

annotations_derived=()
for f in "${extract_dir}/common/annotationsDerived/"*.xml; do
  f=${f%.xml}
  f=${f##*/}
  annotations_derived+=($f)
done

for format in {json,tsv,yaml}; do
  mkdir -p "${script_dir}/../data/${format}"

  # Combined base and derived annotations
  for lang in "${annotations_derived[@]}"; do
    out=$(python3 "${script_dir}/converter.py" --failifempty --ordering-rules "${ordering}" --presentation-sequences "${sequences}" --format "${format}" "${extract_dir}/common/annotationsDerived/${lang}.xml" "${extract_dir}/common/annotations/${lang}.xml") && echo "${out}" > "${script_dir}/../data/${format}/${lang}.${format}"
  done
done

echo "Done! Temporary files left at '${temp_dir}'."
